Что это вообще такое?
----------------------

Во-первых, микрофреймворк для работы с удаленными сервисами по TCP каналу.
Позволяет просто и удобно писать серверную и клиентскую часть для чата, игрового сервера и т.д.
Протокол передачи основан на JSON.
Во-вторых, готовый чат, написанный с использованием этого фреймворка.
Повился на свет как учебный проект.

Фреймворк включает след. пакеты:
xserver.api
xserver.io
xserver.net
xserver.util
xserver.test

Чат-приложение включает след. пакеты:
xserver.chat.model
xserver.chat.service
xserver.chat.app


Краткое описание пакетов 
------------------------

xserver.api
Описаны основные сущности в виде интерфейсов: NetConnection, StreamConnection, PacketConnection, JsonService, JsonServiceConnection.
Здесь же находится реализация менеждера сервисов JsonServiceManager. 

xserver.util
Здесь находится важный класс JsonNode - парсер и конструктор JSON. 

xserver.io
Здесь главное - конверторы поточного соединения в пакетное. 

xserver.net
Здесь реализации сетевых функций.
Основный классы - NioSocketServer и NioSocketClient.
NioSocketServer принимает и обрабатывает входящие соединения, представляя их в виде StreamConnection<ByteBuffer>
NioSocketClient устанавливает соединение с сервером, также представляя его в виде StreamConnection<ByteBuffer>
Оба класса реализованы на java.nio.*.

xserver.test
Зесь есть важный тестовый класс MockChannel реализующий имитацию сетевого соединения. Повсюду используется для тестирования.
Также есть примеры приложений: EchoServer1, EchoServer2, сделанные на MockChannel. 

xserver.chat
содержит чат-клиент и чат-сервер, в виде готового приложения.

xserver.chat.model
Несколько простых самодостаточных классов (POJO) представляющих функциональность чата.

xserver.chat.service
Сервисы, обеспечивающие сетевой доступ к модели чата.

xserver.chat.app
Готовые чат-клиен и  чат-сервер в виде консольных программ.
